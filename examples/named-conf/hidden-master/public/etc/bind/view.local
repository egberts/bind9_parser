////
//// File: view.local
////
//// Title: view for this server's localhost and localnets
////
//// The view statement is a powerful feature of BIND 9 that 
//// lets a name server answer a DNS query differently depending 
//// on who is asking. It is particularly useful for 
//// implementing split DNS setups without having to run 
//// multiple servers.

//// Views are class specific. If no class is given, class IN is 
//// assumed. Note that all non-IN views must contain a hint 
//// zone, since only the IN class has compiled-in default hints. 

//// Zones defined within a view statement will only be 
//// accessible to clients that match the view. By defining 
//// a zone of the same name in multiple views, different 
//// zone data can be given to different clients, for 
//// example, "internal" and "external" clients in a split 
//// DNS setup. 

//// view is class dependent but the default class is IN 
//// (or 'in' - not case dependent) and has been omitted.

//// Each view statement defines a view of the DNS namespace 
//// that will be seen by a subset of clients. A client matches 
//// a view if its source IP address matches the 
//// address_match_list of the view's match-clients clause and 
//// its destination IP address matches the address_match_list of 
//// the view's match-destinations clause. If not specified, both 
//// match-clients and match-destinations default to matching all 
//// addresses. In addition to checking IP addresses 
//// match-clients and match-destinations can also take keys 
//// which provide an mechanism for the client to select the view. 
//// A view can also be specified as match-recursive-only, which 
//// means that only recursive requests from matching clients 
//// will match that view. The order of the view statements is 
//// significant a client request will be resolved in the context 
//// of the first view that it matches. 

view "local"
{
    //// match-clients
    //// A view clause matches when either or both of its match-clients 
    //// and match-destinations statements match and when the 
    //// match-recursive-only condition is met. If either or both 
    //// of match-clients and match-destinations are missing they 
    //// default to any (all hosts match). The match-clients 
    //// statement defines the address_match_list for the source 
    //// IP address of the incoming messages. Any IP which matches 
    //// will use the defined view clause. 
    //// match-clients statement may only be used in a view clause.
    match-clients { localhost; };

    //// A view clause matches when either or both of its match-clients 
    //// and match-destinations statements match and when the 
    //// match-recursive-only condition is met. If either or both 
    //// of match-clients and match-destinations are missing they 
    //// default to any (all hosts match). The match-destination 
    //// statement defines the address_match_list for the destination 
    //// IP address of the incoming messages. Any IP which matches 
    //// will use the defined view clause. 
    //// match-destination statement may only be used in a view clause.
    match-destinations { localhost; };

    //// A view clause matches when either or both of its 
    //// match-clients and match-destinations statements match and 
    //// when the match-recursive-only condition is met. 
    //// If either or both of match-clients and match-destinations 
    //// are missing they default to any (all hosts match). 
    //// The match-recursive-only can be used in conjunction with 
    //// match-clients and match-destinations or on its own if 
    //// that is sufficient differentiation. 
    //// The default is no. 
    //// match-recursive-only statement may only be used in a view clause.
    match-recursive-only yes;

    //// allow-query defines an match list of IP address(es) which are 
    //// allowed to issue queries to the server. If not specified all 
    //// hosts are allowed to make queries (defaults to allow-query {any;};).
    ////
    //// allow-query-on defines the server interface(s) from which 
    //// queries are accepted and can be useful where a server 
    //// is multi-homed, perhaps in conjunction with a view clause. 
    //// Defaults to allow-query-on {any;};) meaning that queries 
    //// are accepted on any server interface.
    //// 
    //// allow-query statements may be used in a zone, view or 
    //// a global options clause.
    allow-query {
        localhost;
    };

    //// Many of the options given in the options statement can also 
    //// be used within a view statement, and then apply only when 
    //// resolving queries with that view. When no view-specific 
    //// value is given, the value in the options statement is used 
    //// as a default. Also, zone options can have default values 
    //// specified in the view statement; these view-specific 
    //// defaults take precedence over those in the options 
    //// statement. 
    recursion yes;

    //// allow-recursion is only relevant if recursion yes; is present 
    //// or defaulted.
    ////
    //// allow-recursion defines a address_match_list of IP address(es) 
    //// which are allowed to issue recursive queries to the server. 
    //// When allow-recursion is present allow-query-cache defaults 
    //// to the same values. If allow-recursion is NOT present the 
    //// allow-query-cache default is assumed (localnets, localhost 
    //// only). Meaning that only localhost (the server's host) and 
    //// hosts connected to the local LAN (localnets) are permitted 
    //// to issue recursive queries.
    //// 
    //// allow-recursion-on defines the server interface(s) from which 
    //// recursive queries are accepted and can be useful where a 
    //// server is multi-homed, perhaps in conjunction with a view 
    //// clause. Defaults to allow-recursion-on {any;}; meaning that 
    //// recursive queries are accepted on any server interface.
    ////
    //// NOTE: Always set 'recursion no' at global option and selectively
    //// enable 'recursion yes' in certain zones AND either with 
    //// 'allow recursion { localnets;localhost;};' on badguy/public view OR
    //// 'allow recursion { any;};' on internal/safe view.
    //// 
    //// These statements may be used in a view or a global options clause.
    allow-recursion { localhost; };

    //// allow-query-cache, since BIND 9.4 allow-query-cache (or its
    //// default) controls access to the cache and thus effectively
    //// determines recursive behavior. This was done to limit the
    //// number of, possibly inadvertant, OPEN DNS resolvers.
    //// allow-query-cache defines an address_match_list of IP
    //// address(es) which are allowed to issue queries that access
    //// the local cache - without access to the local cache
    //// recursive queries are effectively useless so, in effect,
    //// this statement (or its default) controls recursive behavior.
    //// Its default setting depends on:
    ////
    ////   If recursion no; present, defaults to
    ////       allow-query-cache {none;};. No local cache access permitted.
    ////
    ////   If recursion yes; (default) then, if allow-recursion present,
    ////       defaults to the value of allow-recursion. Local cache
    ////       access permitted to the same address_match_list as
    ////       allow-recursion.
    ////
    ////   If recursion yes; (default) then, if allow-recursion is NOT
    ////       present, defaults to
    ////       allow-query-cache {localnets; localhost;};.
    ////       Locaquery-cache {localnets; localhost;};.
    ////       Local cache access permitted to localnets and localhost only.
    ////
    //// Both allow-query-cache and allow-recursion statements are allowed
    //// - this is a recipe for conflicts and a debuggers dream come true.
    //// Use either statement consistently - by preference allow-recursion.
    ////
    //// These statements may be used in a view or a global options clause.
    allow-query-cache {
        localhost;
    };

    //// allow-update may or may not be obsoleted (it wasn't in Bind 9.10)
    //// 'allow-update' on a "locally" view is essential for
    //// communication such as:
    ////    - between DHCP and BIND9
    ////    - between sftdyn and BIND9
    allow-update { 
        key "rndc-key";
    };

    //// forwarders
    //// Example syntax:
    ////     forwarders { ip_addr [port ip_port] ; 
    ////                [ ip_addr [port ip_port] ; ... ] };
    ////     forwarders { 10.2.3.4; 192.168.2.5; };
    //// forwarders defines a list of IP address(es) (and optional port 
    //// numbers) to which queries will be forwarded. Only relevant when 
    //// used with the related forward statement. 
    //// This statement may be used in a zone, view or a global options clause.
    //// WARNING: badguy never needs recursion support, neither does the public
    forwarders {
       208.67.222.222; # OpenDNS
       208.67.220.220; # OpenDNS
    };

    //// empty-zones-enable, by default, is set to yes which means that 
    //// reverse queries for IPv4 and IPv6 addresses covered by RFCs 
    //// 1918, 4193, 5737 and 6598 (as well as IPv6 local address 
    //// (locally assigned), IPv6 link local addresses, the IPv6 
    //// loopback address and the IPv6 unknown address) but which 
    //// is not not covered by a locally defined zone clause will 
    //// automatically return an NXDOMAIN response from the local 
    //// name server. This prevents reverse map queries to such 
    //// addresses escaping to the DNS hierarchy where they are 
    //// simply noise and increase the already high level of query 
    //// pollution caused by mis-configuration. The empty-zone feature 
    //// may be turned off entirely by specifying 
    //// empty-zones-enable no; or selectively by using one or more 
    //// disable-empty-zone statements. 
    //// empty-zones-enable statement may appear in a global options 
    //// clause or a view clause.
    ////
    //// Note: An empty zone contains only an SOA and a single NS RR.
    empty-zones-enable no;

    //// disable-empty-zone by default is set to yes which means that 
    //// reverse queries for IPv4 and IPv6 addresses covered by RFCs 
    //// 1918, 4193, 5737 and 6598 (as well as IPv6 local address 
    //// (locally assigned), IPv6 link local addresses, the IPv6 
    //// loopback address and the IPv6 unknown address) but which is 
    //// not covered by a locally defined zone clause will 
    //// automatically return an NXDOMAIN response from the local name 
    //// server. This prevents reverse map queries to such addresses 
    //// escaping to the DNS hierarchy where they are simply noise and 
    //// increase the already high level of query pollution caused by 
    //// mis-configuration. disable-empty-zone may be used to 
    //// selectively turn off empty zone responses for any particular 
    //// zone in which case the query will escape to the DNS hierarchy. 
    //// To turn off more than one empty-zone, multiple 
    //// disable-empty-zone statements must be defined. There is no 
    //// need to turn off empty-zones for which the user has defined 
    //// a local zone clause since BIND automatically detects this, 
    //// similarly if the name server forwards all queries, the 
    //// empty-zone process is automatically inhibited. Other than 
    //// name servers which delegate to the IN-ADDR.ARPA or IP6.ARPA 
    //// domains, it is not clear who would want to use this statement. 
    //// Perhaps more imaginative readers can see uses. 
    //// disable-empty-zone statement may appear in a global options 
    //// clause or a view clause.
    //// 
    //// Note: An empty zone contains only an SOA and a single NS RR.
    disable-empty-zone yes;

    //// Consider adding the 1918 zones here, if they are not used in your
    //// organization.
    //// WARNING: Badguys should not use your DNS server to resolve localhost
    //include "/etc/bind/zones.rfc1918";
    //include "/etc/bind/default-zones-named.conf";

    //  Ask someone else to map reverse IP to ns1.egbert.net
};

