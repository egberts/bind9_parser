//// 
//// File: options-named.conf
////
//// options
////
//// Groups statements that control generic or global behavior and that 
//// have scope for all zones and views unless overridden within a 
//// zone, views or other clause.
////
//// The options clause group together statements that have global 
//// scope - the statemnts apply to all zones or views unless overridden 
//// by the same statement in a view or zone clause. Only one options 
//// clause should be defined in a named.conf file. The options clause 
//// can take a serious list of statements.
////

//// If there is a firewall between you and nameservers you want
//// to talk to, you may need to fix the firewall to allow multiple
//// ports to talk.  See http://www.kb.cert.org/vuls/id/800113

//// If your ISP provided one or more IP addresses for stable 
//// nameservers, you probably want to use them as forwarders.  
//// Uncomment the following block, and insert the addresses replacing 
//// the all-0's placeholder.

options {

    //// version specifies the string that will be returned to 
    //// a version.bind query when using the chaos class only. 
    //// version_string is a quoted string, for example, "get lost" 
    //// or something equally to the point. We tend to use it in 
    //// all named.conf files to avoid giving out a version number 
    //// such that an attacker can exploit known version-specific 
    //// weaknesses. This statement may only be used in a global 
    //// options clause.
    version "Funky DNS v1.1";

    //// managed-keys-directory (new since Bind 9.11)
    managed-keys-directory "/var/lib/bind/dynamic";

    //// directory is a quoted string defining the absolute path for 
    //// the server e.g. "/var/named". All subsequent relative paths 
    //// use this base directory. If no directory options is specified 
    //// the directory from which BIND was loaded is used. This option 
    //// may only be specified in a 'global' options statement.
    directory "/var/cache/bind";

    //========================================================================
    // If BIND logs error messages about the root key being expired,
    // you will need to update your keys.  See https://www.isc.org/bind-keys
    //  yes = use built-in DLV keys
    //  auto = use built-in DLV keys
    //  no = use bind.keys file
    //========================================================================
    //// dnssec-validation indicates that a resolver (a caching or 
    //// caching-only name server) will attempt to validate replies 
    //// from DNSSEC enabled (signed) zones. To perform this task the 
    //// server also needs either a valid trusted-keys clause (containing 
    //// one or more trusted-anchors or a managed-keys clause. 
    //// Since 9.5 the default value is dnssec-validation yes;. 
    //// This statement may be used in a view or global options clause.
    dnssec-validation yes;

    //// bindkeys-file (new since Bind 9.11)
    //// bindkeys-file "/etc/bind/named.iscdlv.key"; Obsoleted 9.16

    //// listen-on defines the port and IP address(es) on which 
    //// BIND will listen for incoming queries. The default is 
    //// port 53 on all server interfaces. Multiple listen-on 
    //// statements are allowed. This statement may only be used 
    //// in a global options clause.
    ////
    //// Note: on a multi-homed host, you might want to tell named
    //// to listen for queries only on certain interfaces
    listen-on-v6 { none; };

    //// listen-on-v6 turns on BIND to listen for IPv6 queries. If 
    //// this statement is not present and the server supports IPv6 
    //// (only or in dual stack mode) the server will listen for 
    //// IPv6 on port 53 on all server interfaces. If the OS supports 
    //// RFC 3493 and RFC 3542 compliant IPv6 sockets and the 
    //// address_match_list uses the special any name then a single 
    //// listen is issued to the wildcard address. If the OS does not 
    //// support this feature a socket is opened for every required 
    //// address and port. The port default is 53. Multiple 
    //// listen-on-v6 statements are allowed. This statement may only 
    //// be used in a global options clause. Do not try to start bind 
    //// with the -4 argument when you use this statement.
    listen-on port 53 {
            any;
        };

    //// If recursion is set to 'yes' (the default) the server will 
    //// always provide recursive query behaviour if requested by the 
    //// client (resolver). If set to 'no' the server will only 
    //// provide iterative query behaviour - normally resulting in a 
    //// referral. If the answer to the query already exists in the 
    //// cache it will be returned irrespective of the value of this 
    //// statement. This statement essentially controls caching 
    //// behaviour in the server. The allow-recursion statement and the 
    //// view clauses can provide fine-grained control. This statement 
    //// may be used in a view or a global options clause.
    //// NOTE: Always set 'recursion no' at global option and selectively
    //// enable 'recursion yes' in certain zones AND either with 
    //// 'allow recursion { localhost;};' on badguy/public view OR
    //// 'allow recursion { any;};' on internal/safe view.
    ////
    //// CIS says all public-facing interface should not support recursion
    //// recursion yes;
    ////
    //// SLE says public-facing authoritative-only server (used in
    ////    hidden-master configuration or what nots) cannot do recursion.
    recursion no;

    //// interface-interval defines the time in MINUTES when scan 
    //// all interfaces on the server and will begin to listen on new 
    //// interfaces (assuming they are not prevented by a listen-on 
    //// option) and stop listening on interfaces which no longer 
    //// exist. The default is 60 (1 hour), if specified as 0 NO 
    //// interface scan will be performed. The maximum value is 
    //// 40320 (28 days). This option may only be specified in a 
    //// 'global' options statement.
    //// Note: We have no dynamic interfaces, so BIND shouldn't need to
    //// poll for interface state {UP|DOWN}. 
    interface-interval 120;

    //// notify behaviour is applicable to both master zones (with 
    //// 'type master;') and slave zones (with 'type slave;') and if 
    //// set to 'yes' (the default) then, when a zone is loaded or 
    //// changed, for example, after a zone transfer, NOTIFY messages 
    //// are sent to the name servers defined in the NS records for 
    //// the zone (except itself and the 'Primary Master' name server 
    //// defined in the SOA record) and to any IPs listed in any 
    //// also-notify statement.
    //// 
    //// If set to 'no' NOTIFY messages are not sent.
    //// 
    //// If set to 'explicit' NOTIFY is only sent to those IP(s) listed 
    //// in an also-notify statement.
    //// 
    //// If a global notify statement is 'no' an also-notify statement may 
    //// be used to override it for a specific zone, and conversely if 
    //// the global options contain an also-notify list, setting notify 
    //// 'no' in the zone will override the global option. This 
    //// statement may be specified in zone, view clauses or in a 
    //// global options clause.
    //// 
    //// options {
    //// ....
    //// also-notify {10.1.0.15; 172.28.32.7;}; // all zones
    //// ....
    //// };
    //// ....
    //// zone "example.com in{
    //// ....
    //// // NS RRs and global also-notify
    //// notify yes; 
    //// ....
    //// };
    //// zone "example.net in{
    //// ....
    //// // no NOTIFY to NS RRs
    //// // NOTIFY to also-notify IPs above
    //// notify explicit; 
    //// ....
    //// };
    //// 
    //// Notes:
    //// NOTIFY does not indicate that the zone data has changed, but 
    //// rather that the zone data may have changed. The receiver of 
    //// the NOTIFY message should query the zone SOA directly from 
    //// the IP(s) defined in the zone's masters statement.
    //// 
    //// Even if the implementation includes the zone's SOA in the 
    //// NOTIFY message (allowed for in the standards) the receiver 
    //// is mandated NOT to use this data (by RFC 1996). Instead the 
    //// receiving server must query the zone's SOA from the IP(s) 
    //// defined in the masters statement.
    //// 
    //// By default, after a slave has transferred a zone it will 
    //// also send out NOTIFY messages to all the zone's NS RRs (except 
    //// itself obviously). This behavior can be inhibited by using a 
    //// 'notify no;' statement in the slave's zone clause.
    ////
    //// do not generate notify messages for all zones on a restart.
    //// override for authorative zones
    //// Prevent DoS attacks by generating bogus zone transfer
    //// requests.  This will result in slower updates to the
    //// slave servers (e.g. they will await the poll interval
    //// before checking for updates).
    notify yes;

    //// transfer-format is only used by master zones. transfer-format 
    //// determines the format the server uses to transfer zones. 
    //// 'one-answer' places a single record in each message, 
    //// 'many-answers' packs as many records as possible into a maximum 
    //// sized message. 
    //// The default is 'many-answers' which is ONLY KNOWN TO BE 
    //// SUPPORTED BY BIND 9, BIND 8 and later BIND 4 releases so if 
    //// tranferring to other servers e.g. Windows this statement 
    //// may be required. This statement may be specified in server, 
    //// zone or view clauses or in a global options clause.
    //// Generate more efficient zone transfers.  This will place
    //// multiple DNS records in a DNS message, instead of one per
    //// DNS message. 
    //// Use many-answers only if you know all servers contacted are bind9
    transfer-format many-answers;

    //// max-transfer-time-in is only valid for master zones. Outbound 
    //// zone transfers running longer than this many minutes will be 
    //// terminated. The default is 120 minutes (2 hours). The 
    //// maximum value is 28 days (40320 minutes). 
    //// max-transfer-time-in statement may be specified in normal 
    //// zone or view clauses or in a global options clause.
    //// Note: Set the maximum zone transfer time to something more
    //// reasonable.  In this case, we state that any zone transfer
    //// that takes longer than 60 minutes is unlikely to ever
    //// complete.  WARNING:  If you have very large zone files,
    //// adjust this to fit your requirements.
    max-transfer-time-in 60;

    //// allow-update defines an address_match_list of hosts that 
    //// are allowed to submit dynamic updates for master 
    //// zones, and thus this statement enables Dynamic DNS. 
    //// The default in BIND 9 is to disallow updates from 
    //// all hosts, that is, DDNS is disabled by default. 
    //// This statement is mutually exclusive with update-policy 
    //// and applies to master zones only. The example shows 
    //// DDNS for three zones: the first disables DDNS 
    //// explicitly, the second uses an IP-based list, and 
    //// the third references a key clause. The allow-update 
    //// in the first zone clause could have been omitted 
    //// since it is the default behavior. 
    ////
    //// Many people like to be cautious in case the default mode changes.
    ////
    //// SLE: Always say 'none' at global option level, then relax it
    ////      at view or zone option level.
    allow-update { none; };

    //// allow-transfer is allow-transfer defines a match list e.g. 
    //// IP address(es) that are allowed to transfer (copy) the 
    //// zone information from the server (master or slave for the 
    //// zone). The default behaviour is to allow zone transfers to 
    //// any host. While on its face this may seem an excessively 
    //// friendly default, DNS data is essentially public (that's 
    //// why its there) and the bad guys can get all of it anyway. 
    //// However if the thought of anyone being able to transfer 
    //// your precious zone file is repugnant, or (and this is far 
    //// more significant) you are concerned about possible DoS 
    //// attack initiated by XFER requests, then use the 
    //// following policy:
    //// 
    //// options {
    ////    ....
    ////    // ban everyone by default
    ////    allow-transfer {"none";};
    //// };
    //// ...
    //// zone "example.com" in{
    ////   ....
    ////   // explicity allow the slave(s) in each zone
    ////   allow-transfer {192.168.0.3;};
    //// };
    //// 
    //// This statement may be used in a zone, view or global options clause.
    //// sets BINDs default behaviour to refuse all zone transfers. 
    //// Without setting this option, anyone can transfer any zone.
    //// Zone tranfers limited to members of the "xfer" ACL.
    //// ban everyone by default
    ////
    //// SLE: We say 'none' at global option level, but relax it more
    ////      something else at view option level (preferably 
    ////      not at zone level).
    allow-transfer { none; };

    //// transfers-out is only used by master zones. transfers-out 
    //// determines the number of concurrent outbound zone 
    //// transfers. 
    //// Default is 10. 
    //// Zone transfer requests in excess of this limit will be REFUSED. 
    //// transfers-out statement may only be defined in a global options clause.
    transfers-out 10;

    //// allow-query defines an match list of IP address(es) which 
    //// are allowed to issue queries to the server. If not specified 
    //// all hosts are allowed to make queries (defaults to 
    //// allow-query {any;};).
    //// 
    //// allow-query may be used in a zone, view or a global options clause.
    allow-query { any; };

    //// allow-query-cache, since BIND 9.4 allow-query-cache (or its 
    //// default) controls access to the cache and thus effectively 
    //// determines recursive behavior. This was done to limit the 
    //// number of, possibly inadvertant, OPEN DNS resolvers. 
    //// allow-query-cache defines an address_match_list of IP 
    //// address(es) which are allowed to issue queries that access 
    //// the local cache - without access to the local cache 
    //// recursive queries are effectively useless so, in effect, 
    //// this statement (or its default) controls recursive behavior. 
    //// Its default setting depends on:
    //// 
    ////   If recursion no; present, defaults to 
    ////       allow-query-cache {none;};. No local cache access permitted.
    //// 
    ////   If recursion yes; (default) then, if allow-recursion present, 
    ////       defaults to the value of allow-recursion. Local cache 
    ////       access permitted to the same address_match_list as 
    ////       allow-recursion.
    //// 
    ////   If recursion yes; (default) then, if allow-recursion is NOT 
    ////       present, defaults to 
    ////       allow-query-cache {localnets; localhost;};. 
    ////       Local cache access permitted to localnets and localhost only.
    //// 
    //// Both allow-query-cache and allow-recursion statements are allowed 
    //// - this is a recipe for conflicts and a debuggers dream come true. 
    //// Use either statement consistently - by preference allow-recursion.
    //// 
    //// These statements may be used in a view or a global options clause.
    // allow-query-cache { any; };

    //// allow-recursion defines a address_match_list of IP 
    //// address(es) which are allowed to issue recursive queries to 
    //// the server. When allow-recursion is present allow-query-cache 
    //// defaults to the same values. If allow-recursion is NOT present 
    //// the allow-query-cache default is assumed (localnets, 
    //// localhost only). Meaning that only localhost (the server's 
    //// host) and hosts connected to the local LAN (localnets) are 
    //// permitted to issue recursive queries.
    //// 
    //// allow-recursion-on defines the server interface(s) from 
    //// which recursive queries are accepted and can be useful 
    //// where a server is multi-homed, perhaps in conjunction with 
    //// a view clause. Defaults to allow-recursion-on {any;}; 
    //// meaning that recursive queries are accepted on any server 
    //// interface.
    //// 
    //// allow-recursions is only relevant if recursion yes; is present 
    //// or defaulted.
    ////
    //// NOTE: Always set 'recursion no' at global option and selectively
    //// enable 'recursion yes' in certain zones AND either with 
    //// 'allow recursion { localhost;};' on badguy/public view OR
    //// 'allow recursion { any;};' on internal/safe view.
    ////
    //// These statements may be used in a view or a global options clause.
    //// 
    //// SLE says public-facing authoritative-only server (used in
    ////    hidden-master configuration or what nots) should not do recursion.
    allow-recursion { none; };

    //// dnssec-enable indicates that a secure DNS service is being used 
    //// which may be one, or more, of TSIG (for securing zone 
    //// transfers or DDNS updates), SIG(0) (for securing DDNS 
    //// updates) or DNSSEC. Since BIND9.5 the default value is 
    //// dnssec-enable yes;. This statement may be used in a view 
    //// or global options clause.
    //// dnssec-enable yes; // OBSOLETED

    ///dnssec-lookaside auto;   OBSOLETED in 9.15

    //// dnssec-accept-expired is new since Bind 9.11, probably want this yes.
    dnssec-accept-expired no;

    //// dnssec-lookaside (since bind 9.11+)
    ////    auto - automatically determines methods
    ////    <root> trust-anchor dlv.isc.org.
    //// dnssec-lookaside . trust-anchor dlv.isc.org.;  OBSOLETED/SHUTDOWN

    //// auth-nxdomain: If auth-nxdomain is 'yes' allows the server to 
    //// answer authoritatively (the AA bit is set) when returning 
    //// NXDOMAIN (domain does not exist) answers, if 'no' (the 
    //// default) the server will not answer authoritatively. 
    //// NOTE: This changes the previous BIND 8 default setting. 
    //// This statement may be used in a view or a global options clause.
    //// conforms to RFC1035
    auth-nxdomain no;

    //// key-directory is a quoted string defining the absolute path, for 
    //// example, "/var/named/keys" where the keys used in the dynamic 
    //// update of secure zones may be found. Only required if this 
    //// directory is different from that defined by a directory 
    //// option. This statement may only be used in a global options clause.
    // key-directory "dynamic";

    //// The ID the server will return via a query for ID.SERVER with 
    //// type TXT, under class CH (CHAOS). Specifying none disables 
    //// processing of the queries otherwise it will return id-string. 
    //// The default is none. This statement may only be used in 
    //// a global options clause.
    server-id none;    // Ignore EDNS0/NSID

    //// blackhole defines a address_match_list of hosts that the 
    //// server will NOT respond to, or answer queries for. 
    //// The default is 'none' (all hosts are responded to). 
    //// This statement may only be used in a global options clause.
    blackhole {
        // Private RFC 1918 addresses
        10/8; 192.168/16; 172.28/24;
        // Multicast
        224/8;
        // Link Local
        169.254/16;
    };

    //// query-source: Defines the IP address (IPv4 or IPv6) and 
    //// optional port to be used as the source for outgoing queries 
    //// from the server. The BIND default is any server interface 
    //// IP address and a random unprivileged port (1024 to 65535). 
    //// The optional port is only used to control UDP operations. 
    //// avoid-v4-udp-ports and avoid-v6-udp-ports can be used to 
    //// prevent selection of certain ports. 
    //// This statement may be used in a view or a global options clause.
    ////
    //// Health Warning: Use of this option to define a fixed port 
    //// number is extremely dangerous and can quickly lead to 
    //// cache poisoning when used with any caching DNS server 
    //// definition. An attacker normally has to guess both the 
    //// transaction ID and the port number (both 16 bit values). 
    //// If the port is fixed the bad guys have only to guess the 
    //// transaction ID. You just made their job a lot easier. 
    //// Don't do it.
    //// CIS says do not use 'query-source'

    //// pid-file file contains the process id when named/bind is running
    //// pid-file is a quoted string and allows you to define where 
    //// the pid (Process Identifier) used by BIND is written. 
    //// If not present it is distribution or OS specific 
    //// typically /var/run/named.pid or /etc/named.pid. It may be 
    //// defined using an absolute path or relative to the directory 
    //// parameter. 
    //// pid-file? statement may only be used in a global options clause.
    pid-file "/var/run/named/named.pid";

    //// statistics-file is the pathname of the file the server 
    //// appends statistics to when instructed to do so using 
    //// rndc stats. 
    //// If not specified, the default is named.stats in the 
    //// server's current directory. 
    //// This option may only be specified in a 'global' options statement.
    statistics-file "/var/log/named_stats.txt";

    //// zone-statistics is if zone-statistics is 'yes', the server 
    //// will collect statistical data on all zones (unless 
    //// specifically turned off on a per-zone basis by specifying 
    //// zone-statistics no in the zone statement). These statistics 
    //// may be accessed using rndc stats, which will dump them to 
    //// the file listed in the statistics-file options. 
    //// This option may be specified in a zone or a 'global' options statement.
    zone-statistics no;

    //// dump-file is a quoted string defining the absolute path 
    //// where BIND dumps the database (cache) in response to a 
    //// rndc dumpdb. If not specified, the default is 
    //// named_dump.db in the location specified by a directory option. 
    //// This option may only be specified in a 'global' options statement.
    dump-file "/var/cache/bind/cache_dump.db";

    //// session is only used for DHCP running on this machine
    //// DHCP is not needed on slave-type DNS servers.
    ////
    //// SLE: 'session-key*' is practically useless if you
    ////      do not use 'update-policy local'.
    ////      Since you are only allowed one 'update-policy' option,
    ////      using 'local' robs you of further filtering capability.
    session-keyfile "/var/run/named/session.key";
    // session-keyalg "hmac-sha256";
    // session-keyname "local-ddns";

    rate-limit {
        ipv4-prefix-length 32;
        window 10;
        responses-per-second 25;
        errors-per-second 5;
        nxdomains-per-second 5;
        slip 2;
        };

    check-wildcard yes;
    check-mx fail;
    check-integrity yes;
    check-spf warn;
    check-mx-cname warn;
    check-srv-cname warn;

    # The timeout is short because they don't need to allow for 
    # much slowness on our metropolitan-area fibre network.
    # 5 seconds is based on my rough eyeball assessment when
    # typical DNS-over-TCP (DoT) connections are unlikely to be
    # ...
    tcp-clients 25;
    tcp-idle-timeout 50;  # 5 seconds
    tcp-initial-timeout 25;  # 2.5 seconds minimal permitted
    tcp-keepalive-timeout 50;  # 5 seconds
    tcp-advertised-timeout 50;  # 5 seconds
};
